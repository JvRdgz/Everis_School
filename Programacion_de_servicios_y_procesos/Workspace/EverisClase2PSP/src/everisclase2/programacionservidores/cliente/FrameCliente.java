/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package everisclase2.programacionservidores.cliente;

import everisclase2.programacionservidores.operaciones.EnviarFichero;
import everisclase2.programacionservidores.EstructuraFicheros;
import everisclase2.programacionservidores.operaciones.ObtieneFichero;
import everisclase2.programacionservidores.operaciones.PideFichero;
import everisclase2.programacionservidores.cliente.HiloCliente;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Javi
 */
public class FrameCliente extends javax.swing.JFrame {

    /**
     * Creates new form FrameCliente
     */
    private Socket cliente;
    private EstructuraFicheros raiz;
    private EstructuraFicheros nodo;
    private ObjectOutputStream salida;
    private ObjectInputStream entrada;
    private String dirSelec;
    private String fichSelec;
    private String pathSelec;

    public FrameCliente() {
        initComponents();
    }

    public void setVariables(ObjectOutputStream salida, ObjectInputStream entrada, String direSelec, String fichSelec, String pathSelec, EstructuraFicheros raiz, EstructuraFicheros nodo) {

        this.salida = salida;
        this.entrada = entrada;
        this.dirSelec = dirSelec;
        this.fichSelec = fichSelec;
        this.pathSelec = "./";
        this.raiz = raiz;
        this.nodo = nodo;

        System.out.println(salida);
        System.out.println(entrada);

    }

    public void llenarLista(EstructuraFicheros[] files, int num) {
        if (num == 0) {
            return;
        }

        //Cargamos los elementos de la lista
        DefaultListModel modeloLista = new DefaultListModel();
        this.lista.removeAll();
        for (EstructuraFicheros file : files) {
            modeloLista.addElement(file);

        }

        //Asignamos los valores a la lista
        this.lista.setModel(modeloLista);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cabecera1 = new javax.swing.JLabel();
        cabecera2 = new javax.swing.JLabel();
        pie1 = new javax.swing.JLabel();
        pie2 = new javax.swing.JLabel();
        salir = new javax.swing.JButton();
        subir = new javax.swing.JButton();
        Descargar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cabecera1.setText("cabecera1");

        cabecera2.setText("cabecera2");

        pie1.setText("pie1");

        pie2.setText("pie2");

        salir.setText("salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        subir.setText("SubirFichero");
        subir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subirActionPerformed(evt);
            }
        });

        Descargar.setText("Descargar");
        Descargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DescargarActionPerformed(evt);
            }
        });

        lista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lista);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pie1)
                            .addComponent(pie2)
                            .addComponent(cabecera2)
                            .addComponent(cabecera1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subir)
                                    .addComponent(Descargar))
                                .addGap(69, 69, 69))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(salir)
                                .addGap(30, 30, 30))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(cabecera1)
                .addGap(42, 42, 42)
                .addComponent(cabecera2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pie1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(pie2)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(subir)
                        .addGap(47, 47, 47)
                        .addComponent(Descargar)
                        .addGap(48, 48, 48)
                        .addComponent(salir)
                        .addContainerGap(158, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void subirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subirActionPerformed
        //Abrimos un formulario de seleccion de ficheros
        JFileChooser jfc = new JFileChooser();
        //Elegimos el modo de seleccion
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //Elegimos el fichero que queremos subir
        jfc.setDialogTitle("Selecciona el fichero a subir en el servidor");
        //Recogemos la respuesta
        int resp = jfc.showDialog(this, "Subir");
        //Si cumple con la opcion
        if (resp == JFileChooser.APPROVE_OPTION) {
            //Creamos un objeto file a traves de la seleccion que hemos hecho
            File f = jfc.getSelectedFile();
            //Obtenemos el nombre del archivo
            String nombreArchivo = f.getName();
            //Vamos a enviar el fichero con lo que creamos un buffered
            BufferedInputStream bis;
            //Creamos el fichero 
            try {
                bis = new BufferedInputStream(new FileInputStream(f.getAbsolutePath()));
                byte[] buffer = new byte[(int) f.length()];
                int i, j = 0;
                while ((i = bis.read()) != -1) {
                    buffer[j] = (byte) i;
                    j++;
                }

                bis.close();

                //Repasar el tema de la ruta. Creamos el objeto que vamos a enviar al servidor
                Object ob = new EnviarFichero(buffer, nombreArchivo, "C:\\Users\\Javi\\Documents\\CICLOS");
                //Lo enviamos
                this.salida.writeObject(ob);
                //Mensaje
                JOptionPane.showMessageDialog(null, "FICHERO SUBIDO");

                //Establecemos el nodo de la lista de nuevo
                this.nodo = (EstructuraFicheros) this.entrada.readObject();
                //Establecemos la Estructura de ficheros                 
                EstructuraFicheros[] dir = this.nodo.getLista();
                //Establecer la direccion seleccionada
                this.dirSelec = this.nodo.getPath();

                //Llenamos la lista con el nodo de la lista
                llenarLista(dir, this.nodo.getNumFich());

                //Establecemos el numero de ficheros
                this.pie2.setText("Nº Ficheros en el directorio: " + dir.length);

            } catch (IOException ex) {
                System.out.println("Errores");
            } catch (ClassNotFoundException ex) {
                System.out.println("Errores");
            }
        }

    }//GEN-LAST:event_subirActionPerformed

    private void DescargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DescargarActionPerformed

        //Seleccionamos lo que hay en la lista
        Object seleccion = (Object) this.lista.getSelectedValue();
        //Lo casteamos a nuestro Objeto EstructuraFicheros
        EstructuraFicheros es = (EstructuraFicheros) seleccion;

        //Establecemos el path desde el que estamos leyendo
        this.pathSelec = es.getPath();

        //En el caso de que venga vacio finalizamos la funcion
        if (this.pathSelec.equals("")) {
            return;

        }

        //Si no, solicitamos el fichero con la ruta indicada
        try {
            PideFichero pidoFich = new PideFichero(this.pathSelec);
            //Enviamos la solicitud al servidor pasandole el objeto
            salida.writeObject(pidoFich);
            //Creamos el objeto para escribir el fichero obtenido
            FileOutputStream fos = new FileOutputStream(es.getNombre());

            //Recogemos el fichero obtenido
            Object obtengoFichero = entrada.readObject();

            //Si el objeto obtenido es del tipo que espero
            if (obtengoFichero instanceof ObtieneFichero) {
                //Creamos nuestro objeto ObtieneFichero
                ObtieneFichero fich = (ObtieneFichero) obtengoFichero;
                //Creamos el fichero obtenido
                fos.write(fich.getContenidoFichero());
                //Cerramos el fichero
                fos.close();
                //Mostramos un mensaje
                JOptionPane.showMessageDialog(null, "FICHERO DESCARGADO");

            }
        } catch (IOException ex) {
            Logger.getLogger(HiloCliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HiloCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_DescargarActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        try {
            //Cerramos los flujos
            this.cliente.shutdownInput();
            this.cliente.shutdownOutput();

            //cerramos el socket
            this.cliente.close();

        } catch (IOException | NullPointerException ex) {
            //Controlamos la excepcion 
            System.out.println("Operaciones de cierre de la aplicacion. cerrando....");;
            System.exit(0);
        }
    }//GEN-LAST:event_salirActionPerformed

    //Evento para cuando la seleccion de la lista cambia
    private void listaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaValueChanged
        if (this.lista.getValueIsAdjusting()) {

            Object seleccion = (Object) this.lista.getSelectedValue();
            EstructuraFicheros es = (EstructuraFicheros) seleccion;

            String nombre = es.getNombre();

            File fichero = new File(es.getPath());
            if (fichero.isDirectory()) {
                this.pie1.setText("Función No implementada");
            } else {
//                this.fichSelec = fichero.getName();
//                this.pathSelec = fichero.getPath();
                this.pie1.setText("Fichero seleccionado: " + fichero);
            }

        }
    }//GEN-LAST:event_listaValueChanged

    /**
     * @param args the command line arguments
     */
    //No lo estamos usando con lo que lo podemos quitar
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameCliente().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton Descargar;
    protected javax.swing.JLabel cabecera1;
    protected javax.swing.JLabel cabecera2;
    private javax.swing.JScrollPane jScrollPane2;
    protected javax.swing.JList<String> lista;
    protected javax.swing.JLabel pie1;
    protected javax.swing.JLabel pie2;
    protected javax.swing.JButton salir;
    protected javax.swing.JButton subir;
    // End of variables declaration//GEN-END:variables
}
